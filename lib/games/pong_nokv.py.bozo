
from shutil import move
from xml.dom.expatbuilder import theDOMImplementation
from idna import valid_contextj
from kivy.uix.screenmanager import Screen
from kivy.uix.label import Label
from kivy.uix.floatlayout import FloatLayout

from kivy.uix.widget import Widget
from kivy.properties import (
    NumericProperty, ReferenceListProperty, ObjectProperty
)
from kivy.vector import Vector
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.logger import Logger
from kivy.graphics import Color, Rectangle, Ellipse

from lib.constants import CTRL_AXIS_VERTICAL, CTRL_UP_ARROW, CTRL_DOWN_ARROW


VERT_OFFSET = 20


class PongPaddle(Widget):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.velocity = Vector(4, 0).rotate(0)
        self.size = (25, 150)
        self.score = 0

        self.bind(size=self.update)
        self.bind(pos=self.update)
        self.bind(center=self.update)

    def update(self, instance=None, value=None):
        self.canvas.clear()
        with self.canvas:
            Color(1, 1, 1)
            Rectangle(pos=self.pos, size=self.size)

    def bounce_ball(self, ball):
        if self.collide_widget(ball):
            vx, vy = ball.velocity
            offset = (ball.center_y - self.center_y) / (self.height / 2)
            bounced = Vector(-1 * vx, vy)
            Logger.info(f'VEL: {abs(bounced.x)}, {bounced.y}')
            if abs(bounced.x) < 25.0:
                Logger.info(f'Increase')
                vel = bounced * 1.25
            else:
                vel = bounced
            ball.velocity = vel.x, vel.y + offset


class PongBall(Widget):

    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.velocity = Vector(4, 0).rotate(0)
        self.size = (50, 50)
        self.center = (400, 240)

        self.bind(size=self.update)
        self.bind(pos=self.update)
        self.bind(center=self.update)

    def update(self, instance=None, value=None):
        self.canvas.clear()
        with self.canvas:
            Color(1, 1, 1)
            Ellipse(pos=self.pos, size=self.size)

    def move(self):
        Logger.info(f'ID: {id(self)}, POS: {self.pos}, VEL: {self.velocity}')
        self.pos = Vector(*self.velocity) + self.pos


class PongGame(Widget):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self._initialized = False
        self._clock = None

        self._lbl_score_player1 = Label(
            font_size=70,
            text='0',
            color=(1, 1, 1, 1),
            halign='left',
            valign='top',
            size=(80, 80),
            center_x=200,
            center_y=420,
        )
        self.add_widget(self._lbl_score_player1)

        self._lbl_score_player2 = Label(
            font_size=70,
            text='0',
            color=(1, 1, 1, 1),
            halign='left',
            valign='top',
            size=(80, 80),
            center_x=600,
            center_y=420,
        )
        self.add_widget(self._lbl_score_player2)

        self._pong_ball = PongBall(pos=(375, 215), size=(50,50))
        self.add_widget(self._pong_ball)

        # self._player1 = PongPaddle(x=0, center_y=self.center_y)
        # self.add_widget(self._player1)
        # self._player2 = PongPaddle(x=750, center_y=self.center_y)
        # self.add_widget(self._player2)

        self.bind(size=self._update)
        self.bind(pos=self._update)

        # Setup callbacks
        Window.bind(on_joy_hat=self.on_joy_hat)
        Window.bind(on_joy_ball=self.on_joy_ball)
        Window.bind(on_joy_axis=self.on_joy_axis)
        Window.bind(on_joy_button_up=self.on_joy_button_up)
        Window.bind(on_joy_button_down=self.on_joy_button_down)

    def _update(self, instance=None, value=None):
        w = self.width
        h = self.height

        with self.canvas.before:
            Color(0, .7, 0)
            Rectangle(pos=self.pos, size=(w, h))
            Color(1, 1, 1)
            Rectangle(pos=(self.center_x - 5, 0), size=(10, self.height))

        # self._layout.size = self.size
        # self._layout.pos = self.pos

        # self._lbl_score_player1.center_x = self.width/4
        # self._lbl_score_player1.center_y = self.top - 100
        # self._lbl_score_player2.center_x = self.width * 3/4
        # self._lbl_score_player2.center_y = self.top - 100

    def build(self):
        Logger.info('Building Pong game')

    def play(self):
        self._initialized = False
        self._clock = Clock.schedule_interval(self.update, 1.0 / 60.0)

    def stop(self):
        self._clock.cancel()

    def serve_ball(self, vel=(4, 0)):
        self._pong_ball.center = self.center
        self._pong_ball.velocity = vel

    def update(self, dt):
        if not self._initialized:
            self.serve_ball()
            self._initialized = True
            self._player1 = PongPaddle(x=0, center_y=self.center_y)
            self.add_widget(self._player1)
            self._player2 = PongPaddle(x=750, center_y=self.center_y)
            self.add_widget(self._player2)

        self._player1.update()
        self._player2.update()

        self._pong_ball.move()

        # bounce off paddles
        self._player1.bounce_ball(self._pong_ball)
        self._player2.bounce_ball(self._pong_ball)

        # # bounce ball off bottom or top
        if (self._pong_ball.y < self.y) or (self._pong_ball.top > self.top):
            self._pong_ball.velocity_y *= -1

        # # went off to a side to score point?
        if self._pong_ball.x < self.x:
            self._player2.score += 1
            self.serve_ball(vel=(4, 0))
        if self._pong_ball.right > self.width:
            self._player1.score += 1
            self.serve_ball(vel=(-4, 0))

    def on_joy_axis(self, win, stick_id, axis_id, value):
        if axis_id == 1:
            if stick_id == 0:
                player = self.player1
            elif stick_id == 1:
                player = self.player2

            if player:
                if value == CTRL_UP_ARROW:
                    if (player.top + VERT_OFFSET) < self.height:
                        player.center_y += VERT_OFFSET
                elif value == CTRL_DOWN_ARROW:
                    if (player.top - VERT_OFFSET - player.height) > 0:
                        player.center_y -= VERT_OFFSET

        Logger.info(f'Axis [{stick_id}]: [{axis_id}]: {value}')

    def on_joy_ball(self, win, stickid, ballid, xvalue, yvalue):
        Logger.info(f'Ball [{stickid}]: [{ballid}]: {xvalue}, {yvalue}')

    def on_joy_hat(self, win, stickid, hatid, value):
        Logger.info(f'Hat [{stickid}]: [{hatid}]: {value}')

    def on_joy_button_down(self, win, stickid, buttonid):
        Logger.info(f'Button down [{stickid}]: {buttonid}')

    def on_joy_button_up(self, win, stickid, buttonid):
        Logger.info(f'Button up [{stickid}]: {buttonid}')


class PongScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self._game = PongGame()
        self.add_widget(self._game)

    def play(self):
        self._game.play()

    def on_enter(self):
        Logger.info('ENTER Pong screen')
        # self._game.play()

    def on_leave(self):
        Logger.info('LEAVE Pong screen')
        # self._game.stop()
